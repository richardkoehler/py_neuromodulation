{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9d66239e",
   "metadata": {},
   "source": [
    "# ParametrizationDefinition\n",
    "\n",
    "### nm_settings.json\n",
    "\n",
    "In order to estimate multimodal features of neurophysiological data, certain parametrization steps are required. \n",
    "Here the following two parametrization files are explained: \n",
    " - `nm_settings.json`\n",
    " - `nm_channels.csv`\n",
    " \n",
    "The `nm_settings.json` specifies the general feature processing. Most importantly, all provided features can be enabled and disabled: \n",
    "```json\n",
    "\"methods\": \n",
    "{\n",
    "        \"raw_resampling\": false,\n",
    "        \"normalization\": true,\n",
    "        \"kalman_filter\": true,\n",
    "        \"re_referencing\": true,\n",
    "        \"notch_filter\": true,\n",
    "        \"bandpass_filter\": true,\n",
    "        \"raw_hjorth\": true,\n",
    "        \"sharpwave_analysis\": true,\n",
    "        \"return_raw\": true,\n",
    "        \"project_cortex\": false,\n",
    "        \"project_subcortex\": false,\n",
    "        \"pdc\": false,\n",
    "        \"dtf\": false\n",
    "}\n",
    "```\n",
    "\n",
    "**raw_resampling** defines a resampling rate to which the original data is downsampled to. This can be of advantage, since high sampling frequencies automatically require higher computational cost. In the method-specific-settings the resampling frequency can be defined: \n",
    "\n",
    "```json\n",
    "\"raw_resampling_settings\": {\n",
    "        \"resample_freq\": 1000\n",
    "    }\n",
    "```\n",
    "\n",
    "**normalization** allows for normalizing the past *normalization_time* according to the *mean*, *median* and some others that are defined in 'nm_normalization.py'.\n",
    "\n",
    "```json\n",
    "\"raw_normalization_settings\": {\n",
    "        \"normalization_time\": 10,\n",
    "        \"normalization_method\": \"median\"\n",
    "    }\n",
    "\n",
    "```\n",
    "\n",
    "**kalman_filtering** is motivated by filtering estimated band power features using the white noise acceleration model (see [\"Improved detection of Parkinsonian resting tremor with feature engineering and Kalman filtering\"](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6927801/) Yao et al 19) for a great reference. The white noise acceleration model get's specified by the $T_p$ prediction interval (Hz), and the process noise is then defined by $\\sigma_w$ and $\\sigma_v$: \n",
    "\n",
    "$\n",
    "  Q=\n",
    "  \\left[ {\\begin{array}{cc}\n",
    "   \\sigma_w^2\\frac{T_p^{3}}{3} & \\sigma_w^2\\frac{T_p^2}{2}\\\\\n",
    "   \\sigma_w^2\\frac{T_p^2}{3} & \\sigma_w^2T_p\\\\\n",
    "  \\end{array} } \\right]\n",
    "$\n",
    "\n",
    "\n",
    "```json\n",
    "\"kalman_filter_settings\": {\n",
    "        \"Tp\": 0.1,\n",
    "        \"sigma_w\": 0.7,\n",
    "        \"sigma_v\": 1,\n",
    "        \"frequency_bands\": [\n",
    "            \"low gamma\",\n",
    "            \"high gamma\",\n",
    "            \"all gamma\"\n",
    "        ]\n",
    "    }\n",
    "```\n",
    "Individual frequency bands (specified in the **frequency_ranges**) can be selected for Kalman Filtering (see [\"Real-time epileptic seizure prediction using AR models and support vector machines\"](https://pubmed.ncbi.nlm.nih.gov/20172805/) (Chisci et al 10)).\n",
    "\n",
    "**re_referencing** constitutes an important aspect of electrophysiological signal processing. Most commonly bipolar and common average rereferencing are applied. Due to that reason a seperate file, `nm_channels.csv` can be specified before feature estimation, or it is automatically setup during parametrization when read via Bids. `nm_channels.csv` contains a column *rereference*, specifying the rereference methods \n",
    " - *average* for common average rereference (across a channel type, e.g. ecog)\n",
    " - bipolar rereferencing, by specifying the channel name to rereference to, e.g. *LFP_BS_STN_L_1*\n",
    " - *none* for no rereferencing being used for this particular channel \n",
    "\n",
    "**notch_filter** enables notch filters at the specified line_noise and it's harmonics. \n",
    "\n",
    "**bandpass_filter** enables band power feature estimation. Settings are defined in such manner: \n",
    "```json\n",
    "\"bandpass_filter_settings\": {\n",
    "    \"segment_lengths\": {\n",
    "        \"theta\": 1000,\n",
    "        \"alpha\": 500,\n",
    "        \"low beta\": 333,\n",
    "        \"high beta\": 333,\n",
    "        \"low gamma\": 100,\n",
    "        \"high gamma\": 100,\n",
    "        \"HFA\": 100\n",
    "    },\n",
    "    \"bandpower_features\": {\n",
    "        \"activity\": true,\n",
    "        \"mobility\": false,\n",
    "        \"complexity\": false\n",
    "    },\n",
    "    \"log_transform\" : true\n",
    "}\n",
    "```\n",
    "\n",
    "Here the frequency-band name (e.g. *theta*) get's specified, and in the the subsequent list the frequency range (here from 4 - 8 Hz) is defined. The *segment_length* parameter defines a time range in which FIR filtered data is used for feature estimation in milliseconds. Here the previous 1000 ms are used to estimate features based on the FIR filtered signals in the range of 4 to 8 Hz. This might be beneficial when using shorter frequency bands, e.g. gamma, where estimating band power in a range of e.g. 100 ms might result in a temporal more specified feature calculation. \n",
    "A common way to estimate band power is to take the variance of FIR filtered data. This is equavilent to the activity [Hjorth](https://en.wikipedia.org/wiki/Hjorth_parameters) parameter. The *bandpower_features* key in the *bandpass_filter_settings* allows to take the *activity*, *mobility* and *complexity* Hjorth parameters. For estimating Hjorth parameters of the raw unfiltered signal, the **raw_hjorth** method can be enabled. *log_transform* can be beneficial disentangling frequency bands for achieving higher performances with e.g. LDA.\n",
    "\n",
    "**sharpwave_analysis** allows for calculation of temporal sharpwave features. See [\"Brain Oscillations and the Importance of Waveform Shape\"](https://www.sciencedirect.com/science/article/abs/pii/S1364661316302182) Cole et al 17 for a great motivation to use these features. Here, sharpwave features are estimated using a prior bandpass filter  between *filter_low_cutoff* and *filter_high_cutoff*. The sharpwave peak and trough features can be calculated, defined by the *estimate* key. According to a current data batch one or more sharpwaves can be detected. The subsequent feature is returned rather by the *mean, median, maximum, minimum or variance* as defined by the *estimator*. \n",
    "```json\n",
    "\"sharpwave_analysis_settings\": {\n",
    "    \"sharpwave_features\": {\n",
    "        \"peak_left\": false,\n",
    "        \"peak_right\": false,\n",
    "        \"trough\": false,\n",
    "        \"width\": false,\n",
    "        \"prominence\": true,\n",
    "        \"interval\": true,\n",
    "        \"decay_time\": false,\n",
    "        \"rise_time\": false,\n",
    "        \"sharpness\": true,\n",
    "        \"rise_steepness\": false,\n",
    "        \"decay_steepness\": false,\n",
    "        \"slope_ratio\": false\n",
    "    },\n",
    "    \"filter_low_cutoff\": 5,\n",
    "    \"filter_high_cutoff\": 80,\n",
    "    \"detect_troughs\": {\n",
    "        \"estimate\": true,\n",
    "        \"distance_troughs\": 10,\n",
    "        \"distance_peaks\": 5\n",
    "    },\n",
    "    \"detect_peaks\": {\n",
    "        \"estimate\": true,\n",
    "        \"distance_troughs\": 5,\n",
    "        \"distance_peaks\": 10\n",
    "    },\n",
    "    \"estimator\": {\n",
    "        \"mean\": [\n",
    "            \"interval\"\n",
    "        ],\n",
    "        \"median\": null,\n",
    "        \"max\": [\n",
    "            \"prominence\",\n",
    "            \"sharpness\"\n",
    "        ],\n",
    "        \"min\": null,\n",
    "        \"var\": null\n",
    "    },\n",
    "    \"apply_estimator_between_peaks_and_troughs\" : true\n",
    "}\n",
    "```\n",
    "A separate tutorial on sharpwave features is provided in the documentation. \n",
    "\n",
    "Next, raw signals can be returned, specifed by the **return_raw** method. \n",
    "\n",
    "**projection_cortex** and **projection_subcortex** allows then feature projection of individual channels to a common subcortical or cortical grid, defined by *grid_cortex.tsv* and *subgrid_cortex.tsv*. For both projections a *max_dist* parameter needs to be specified, in which data is linearly interpolated, weighted by their inverse grid point distance. \n",
    "\n",
    "Additionally **coherence** enable connectiviy features for certain *frequency_bands* between *channels* pairs provided by a Python list. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b05be78f",
   "metadata": {},
   "source": [
    "### nm_channels.csv\n",
    "\n",
    "As described above, rereferencing will be estimated automatically given the specified channel types. To demonstrate a typical rereferencing scheme, here the example BIDS data in 'py_neuromodulation/examples/data' is read.\n",
    "\n",
    "First, the path needs to specified and necessary libaries imported:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b1b947ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "import py_neuromodulation as pn\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "4f5d0cd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "PATH_BIDS = os.path.join(pn.__path__[0], \"..\", \"examples\", \"data\")\n",
    "PATH_RUN = os.path.join(\n",
    "    PATH_BIDS,\n",
    "    \"sub-testsub\",\n",
    "    \"ses-EphysMedOff\",\n",
    "    \"ieeg\",\n",
    "    \"sub-testsub_ses-EphysMedOff_task-buttonpress_run-0_ieeg.vhdr\"\n",
    ")\n",
    "PATH_OUT = os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "035593bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting parameters from C:\\Users\\ICN_admin\\Documents\\py_neuromodulation\\py_neuromodulation\\..\\examples\\data\\sub-testsub\\ses-EphysMedOff\\ieeg\\sub-testsub_ses-EphysMedOff_task-buttonpress_run-0_ieeg.vhdr...\n",
      "Setting channel info structure...\n",
      "Reading channel info from C:\\Users\\ICN_admin\\Documents\\py_neuromodulation\\py_neuromodulation\\..\\examples\\data\\sub-testsub\\ses-EphysMedOff\\ieeg\\sub-testsub_ses-EphysMedOff_task-buttonpress_run-0_channels.tsv.\n",
      "Reading in coordinate system frame MNI152NLin2009bAsym: None.\n",
      "Reading electrode coords from C:\\Users\\ICN_admin\\Documents\\py_neuromodulation\\py_neuromodulation\\..\\examples\\data\\sub-testsub\\ses-EphysMedOff\\ieeg\\sub-testsub_ses-EphysMedOff_acq-StimOff_space-mni_electrodes.tsv.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ICN_admin\\Documents\\py_neuromodulation\\py_neuromodulation\\nm_IO.py:41: RuntimeWarning: Did not find any events.tsv associated with sub-testsub_ses-EphysMedOff_task-buttonpress_run-0.\n",
      "\n",
      "The search_str was \"C:\\Users\\ICN_admin\\Documents\\py_neuromodulation\\py_neuromodulation\\..\\examples\\data\\sub-testsub\\**\\ieeg\\sub-testsub_ses-EphysMedOff*events.tsv\"\n",
      "  raw_arr = mne_bids.read_raw_bids(bids_path)\n",
      "C:\\Users\\ICN_admin\\Documents\\py_neuromodulation\\py_neuromodulation\\nm_IO.py:41: RuntimeWarning: iEEG Coordinate frame MNI152NLin2009bAsym is not a readable BIDS keyword by mne-bids yet. The allowed keywords are: ['ACPC', 'Pixels', 'Other']\n",
      "  raw_arr = mne_bids.read_raw_bids(bids_path)\n",
      "--- Logging error ---\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\logging\\__init__.py\", line 1079, in emit\n",
      "    msg = self.format(record)\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\logging\\__init__.py\", line 923, in format\n",
      "    return fmt.format(record)\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\logging\\__init__.py\", line 659, in format\n",
      "    record.message = record.getMessage()\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\logging\\__init__.py\", line 363, in getMessage\n",
      "    msg = msg % self.args\n",
      "TypeError: not all arguments converted during string formatting\n",
      "Call stack:\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\runpy.py\", line 197, in _run_module_as_main\n",
      "    return _run_code(code, main_globals, None,\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\runpy.py\", line 87, in _run_code\n",
      "    exec(code, run_globals)\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\ipykernel_launcher.py\", line 16, in <module>\n",
      "    app.launch_new_instance()\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\traitlets\\config\\application.py\", line 846, in launch_instance\n",
      "    app.start()\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\ipykernel\\kernelapp.py\", line 677, in start\n",
      "    self.io_loop.start()\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\tornado\\platform\\asyncio.py\", line 199, in start\n",
      "    self.asyncio_loop.run_forever()\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\asyncio\\base_events.py\", line 596, in run_forever\n",
      "    self._run_once()\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\asyncio\\base_events.py\", line 1890, in _run_once\n",
      "    handle._run()\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\asyncio\\events.py\", line 80, in _run\n",
      "    self._context.run(self._callback, *self._args)\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 457, in dispatch_queue\n",
      "    await self.process_one()\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 446, in process_one\n",
      "    await dispatch(*args)\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 353, in dispatch_shell\n",
      "    await result\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\ipykernel\\kernelbase.py\", line 648, in execute_request\n",
      "    reply_content = await reply_content\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\ipykernel\\ipkernel.py\", line 353, in do_execute\n",
      "    res = shell.run_cell(code, store_history=store_history, silent=silent)\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\ipykernel\\zmqshell.py\", line 532, in run_cell\n",
      "    return super().run_cell(*args, **kwargs)\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2768, in run_cell\n",
      "    result = self._run_cell(\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2814, in _run_cell\n",
      "    return runner(coro)\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\IPython\\core\\async_helpers.py\", line 129, in _pseudo_sync_runner\n",
      "    coro.send(None)\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3012, in run_cell_async\n",
      "    has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3191, in run_ast_nodes\n",
      "    if await self.run_code(code, result, async_=asy):\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 3251, in run_code\n",
      "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "  File \"C:\\Users\\ICN_AD~1\\AppData\\Local\\Temp/ipykernel_22744/3622542899.py\", line 1, in <module>\n",
      "    pn_stream = pn.nm_BidsStream.BidsStream(\n",
      "  File \"C:\\Users\\ICN_admin\\Documents\\py_neuromodulation\\py_neuromodulation\\nm_BidsStream.py\", line 55, in __init__\n",
      "    self.raw_arr, self.raw_arr_data, fs, line_noise = nm_IO.read_BIDS_data(\n",
      "  File \"C:\\Users\\ICN_admin\\Documents\\py_neuromodulation\\py_neuromodulation\\nm_IO.py\", line 41, in read_BIDS_data\n",
      "    raw_arr = mne_bids.read_raw_bids(bids_path)\n",
      "  File \"<decorator-gen-586>\", line 24, in read_raw_bids\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\mne_bids\\read.py\", line 722, in read_raw_bids\n",
      "    _read_dig_bids(electrodes_fname, coordsystem_fname,\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\mne_bids\\dig.py\", line 519, in _read_dig_bids\n",
      "    montage = _handle_electrodes_reading(electrodes_fpath, coord_frame,\n",
      "  File \"C:\\Users\\ICN_admin\\Anaconda3\\envs\\pn_env\\lib\\site-packages\\mne_bids\\dig.py\", line 42, in _handle_electrodes_reading\n",
      "    logger.info(\"The read in electrodes file is: \\n\", summary_str)\n",
      "Message: 'The read in electrodes file is: \\n'\n",
      "Arguments: ([('name', ['ECOG_L_1_SMC_AT', 'ECOG_L_2_SMC_AT', 'ECOG_L_3_SMC_AT', 'ECOG_L_4_SMC_AT', 'ECOG_L_5_SMC_AT', 'ECOG_L_6_SMC_AT', 'LFP_L_234_STN_BS', 'LFP_L_567_STN_BS', 'LFP_L_1_STN_BS', 'LFP_L_234_STN_BS', 'LFP_L_567_STN_BS', 'LFP_R_234_STN_BS', 'LFP_R_567_STN_BS', 'ANALOG_ROT_R_1']), ('x', ['-47', '-46', '-45.5', '-44.5', '-42', '-39', '11.8', '12.39', '-11.3', '-11.8', '-12.39', '12.93', '13.4', 'n/a']), ('y', ['-26', '-15.5', '-5.5', '4', '14', '22.5', '-15', '-14.29', '-15.9', '-15', '-14.29', '-13.41', '-12.52', 'n/a']), ('z', ['65', '63', '60.5', '57.5', '53.5', '49.5', '-7.7', '-5.9', '-9.9', '-7.7', '-5.9', '-4.1', '-2.2', 'n/a']), ('size', ['n/a', 'n/a', 'n/a', 'n/a', 'n/a', 'n/a', 'n/a', 'n/a', 'n/a', 'n/a', 'n/a', 'n/a', 'n/a', 'n/a'])],)\n",
      "C:\\Users\\ICN_admin\\Documents\\py_neuromodulation\\py_neuromodulation\\nm_IO.py:41: RuntimeWarning: There are channels without locations (n/a) that are not marked as bad: ['ANALOG_ROT_R_1']\n",
      "  raw_arr = mne_bids.read_raw_bids(bids_path)\n",
      "C:\\Users\\ICN_admin\\Documents\\py_neuromodulation\\py_neuromodulation\\nm_IO.py:41: RuntimeWarning: Fiducial point nasion not found, assuming identity unknown to head transformation\n",
      "  raw_arr = mne_bids.read_raw_bids(bids_path)\n"
     ]
    }
   ],
   "source": [
    "pn_stream = pn.nm_BidsStream.BidsStream(\n",
    "    PATH_RUN=PATH_RUN,\n",
    "    PATH_BIDS=PATH_BIDS,\n",
    "    PATH_OUT=PATH_OUT\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0275464",
   "metadata": {},
   "source": [
    "Then the nm_channels.csv file is automatically specifed given the respective channel types. Since one channel contains an 'analog' substring, it is automaticaly assginged to be a *target* channel. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f0c8cd2",
   "metadata": {},
   "source": [
    "Based on 'seeg' type (could be also 'dbs'), the subsequent depth local field potential channel is selected for rereferencing. For 'ecog' channels, the average rereference function is automatically assigned. \n",
    "\n",
    "Note here also that channels can be 'used' for feature analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3e8dbfff",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>rereference</th>\n",
       "      <th>used</th>\n",
       "      <th>target</th>\n",
       "      <th>type</th>\n",
       "      <th>status</th>\n",
       "      <th>new_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ANALOG_R_ROTA_CH</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>misc</td>\n",
       "      <td>good</td>\n",
       "      <td>ANALOG_R_ROTA_CH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ECOG_L_1_SMC_AT</td>\n",
       "      <td>average</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ecog</td>\n",
       "      <td>good</td>\n",
       "      <td>ECOG_L_1_SMC_AT-avgref</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ECOG_L_2_SMC_AT</td>\n",
       "      <td>average</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ecog</td>\n",
       "      <td>good</td>\n",
       "      <td>ECOG_L_2_SMC_AT-avgref</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ECOG_L_3_SMC_AT</td>\n",
       "      <td>average</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ecog</td>\n",
       "      <td>good</td>\n",
       "      <td>ECOG_L_3_SMC_AT-avgref</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ECOG_L_4_SMC_AT</td>\n",
       "      <td>average</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ecog</td>\n",
       "      <td>good</td>\n",
       "      <td>ECOG_L_4_SMC_AT-avgref</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ECOG_L_5_SMC_AT</td>\n",
       "      <td>average</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ecog</td>\n",
       "      <td>good</td>\n",
       "      <td>ECOG_L_5_SMC_AT-avgref</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ECOG_L_6_SMC_AT</td>\n",
       "      <td>average</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>ecog</td>\n",
       "      <td>good</td>\n",
       "      <td>ECOG_L_6_SMC_AT-avgref</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>EEG_AO</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>misc</td>\n",
       "      <td>good</td>\n",
       "      <td>EEG_AO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>LFP_L_1_STN_BS</td>\n",
       "      <td>LFP_L_567_STN_BS</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>seeg</td>\n",
       "      <td>good</td>\n",
       "      <td>LFP_L_1_STN_BS-LFP_L_567_STN_BS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>LFP_L_234_STN_BS</td>\n",
       "      <td>LFP_L_1_STN_BS</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>seeg</td>\n",
       "      <td>good</td>\n",
       "      <td>LFP_L_234_STN_BS-LFP_L_1_STN_BS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>LFP_L_567_STN_BS</td>\n",
       "      <td>LFP_L_234_STN_BS</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>seeg</td>\n",
       "      <td>good</td>\n",
       "      <td>LFP_L_567_STN_BS-LFP_L_234_STN_BS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>LFP_R_234_STN_BS</td>\n",
       "      <td>LFP_R_567_STN_BS</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>seeg</td>\n",
       "      <td>good</td>\n",
       "      <td>LFP_R_234_STN_BS-LFP_R_567_STN_BS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>LFP_R_567_STN_BS</td>\n",
       "      <td>LFP_R_234_STN_BS</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>seeg</td>\n",
       "      <td>good</td>\n",
       "      <td>LFP_R_567_STN_BS-LFP_R_234_STN_BS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>SQUARED_ARTIFACT</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>misc</td>\n",
       "      <td>good</td>\n",
       "      <td>SQUARED_ARTIFACT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>SQUARED_ROTATION</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>misc</td>\n",
       "      <td>good</td>\n",
       "      <td>SQUARED_ROTATION</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                name       rereference  used  target  type status  \\\n",
       "0   ANALOG_R_ROTA_CH              None     0       0  misc   good   \n",
       "1    ECOG_L_1_SMC_AT           average     1       0  ecog   good   \n",
       "2    ECOG_L_2_SMC_AT           average     1       0  ecog   good   \n",
       "3    ECOG_L_3_SMC_AT           average     1       0  ecog   good   \n",
       "4    ECOG_L_4_SMC_AT           average     1       0  ecog   good   \n",
       "5    ECOG_L_5_SMC_AT           average     1       0  ecog   good   \n",
       "6    ECOG_L_6_SMC_AT           average     1       0  ecog   good   \n",
       "7             EEG_AO              None     0       0  misc   good   \n",
       "8     LFP_L_1_STN_BS  LFP_L_567_STN_BS     1       0  seeg   good   \n",
       "9   LFP_L_234_STN_BS    LFP_L_1_STN_BS     1       0  seeg   good   \n",
       "10  LFP_L_567_STN_BS  LFP_L_234_STN_BS     1       0  seeg   good   \n",
       "11  LFP_R_234_STN_BS  LFP_R_567_STN_BS     1       0  seeg   good   \n",
       "12  LFP_R_567_STN_BS  LFP_R_234_STN_BS     1       0  seeg   good   \n",
       "13  SQUARED_ARTIFACT              None     0       0  misc   good   \n",
       "14  SQUARED_ROTATION              None     0       1  misc   good   \n",
       "\n",
       "                             new_name  \n",
       "0                    ANALOG_R_ROTA_CH  \n",
       "1              ECOG_L_1_SMC_AT-avgref  \n",
       "2              ECOG_L_2_SMC_AT-avgref  \n",
       "3              ECOG_L_3_SMC_AT-avgref  \n",
       "4              ECOG_L_4_SMC_AT-avgref  \n",
       "5              ECOG_L_5_SMC_AT-avgref  \n",
       "6              ECOG_L_6_SMC_AT-avgref  \n",
       "7                              EEG_AO  \n",
       "8     LFP_L_1_STN_BS-LFP_L_567_STN_BS  \n",
       "9     LFP_L_234_STN_BS-LFP_L_1_STN_BS  \n",
       "10  LFP_L_567_STN_BS-LFP_L_234_STN_BS  \n",
       "11  LFP_R_234_STN_BS-LFP_R_567_STN_BS  \n",
       "12  LFP_R_567_STN_BS-LFP_R_234_STN_BS  \n",
       "13                   SQUARED_ARTIFACT  \n",
       "14                   SQUARED_ROTATION  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pn_stream.nm_channels"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "03119ff081f2d4c2bd865053ad68491391ad07216407b4ceb90d97786b9781fa"
  },
  "kernelspec": {
   "display_name": "pyneuromodulation",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
